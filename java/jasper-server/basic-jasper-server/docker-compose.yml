version: '3'
services:

  mariadb:
    container_name: mariadb
    image: 'docker.io/bitnami/mariadb:10.3-debian-10'
    restart: always
    environment:
      - MARIADB_USER=bn_jasperreports
      - MARIADB_DATABASE=bitnami_jasperreports
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ./mariadb-data:/bitnami
    ports:
      - 3306:3306

  mariadb-iw:
    container_name: mariadb-iw
    image: 'docker.io/bitnami/mariadb:10.3-debian-10'
    restart: always
    environment:
      - MARIADB_USER=iwcare
      - MARIADB_DATABASE=iw
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ./mariadb-iw-data:/bitnami
    ports:
      - 33006:3306

#  adminer:
#    container_name: adminer
#    image: adminer:latest
#    restart: always
#    ports:
#      - 8080:8080

  mongodb:
    container_name: mongodb
    image: mongo:4.4
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=iwcare@1
    volumes:
      - ./mongodb-data:/data/db


#  mongo-express:
#    container_name: mongodb-express
#    image: mongo-express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: iwcare@1

  jasper-server:
    container_name: jasper-server
    image: 'docker.io/bitnami/jasperreports:7-debian-10'
    restart: always
    # network_mode: host
    environment:
      - MARIADB_HOST=mariadb
      - MARIADB_PORT_NUMBER=3306
      - JASPERREPORTS_DATABASE_USER=bn_jasperreports
      - JASPERREPORTS_DATABASE_NAME=bitnami_jasperreports
    ports:
      - 80:8080
    volumes:
      - ./jasper-server-data:/bitnami
    depends_on:
      - mariadb


  portainer-agent:
    container_name: portainer-agent
    image: portainer/agent
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data

  iw-simple-mirror:
    container_name: db-mirror
    image: ghcr.io/oracle/oraclelinux7-golang:1.13
    ports:
      - 5000:5000
  


#volumes:
#  mariadb_data:
#    driver: local
#  mariadb_data_iw:
#    driver: local
#  mongodb_data:
#    driver: local
#  jasperreports_data:
#    driver: local
#  portainer_data:
#    driver: local

#  docker volume create portainer_data
#  docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent
#  docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

#  agent:
#    image: portainer/agent
#    environment:
#      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
#      # deployed inside an overlay network
#      AGENT_CLUSTER_ADDR: tasks.agent
#      # AGENT_PORT: 9001
#      # LOG_LEVEL: debug
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/volumes:/var/lib/docker/volumes
#    networks:
#      - agent_network
#    deploy:
#      mode: global
#      placement:
#        constraints: [node.platform.os == linux]
#
#    portainer:
#      image: portainer/portainer
#      command: -H tcp://tasks.agent:9001 --verify
#      ports:
#        - "9000:9000"
#        - "8000:8000"
#      volumes:
#        - portainer_data:/data
#      networks:
#        - agent_network
#      deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints: [node.role == manager]
#networks:
#  agent_network:
#    driver: overlay
